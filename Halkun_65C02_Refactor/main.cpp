#include <iostream>
#include <iomanip>
#include <cstdint>
#include <cassert>
#include <conio.h>
#include <sstream>

#include <cctype>

#include "mcu_core.hpp"

struct tHexFormat
{
    uint16_t m_Num;
    uint8_t m_Digits;

    tHexFormat( uint16_t number ) : m_Num( number ), m_Digits( 4 ) {}
    tHexFormat( uint8_t number ) : m_Num( number ), m_Digits( 2 ) {}
};

std::ostream& operator<<( std::ostream& os, const tHexFormat& rFormat )
{
    os << std::hex << std::setw( rFormat.m_Digits ) << std::setfill('0') << rFormat.m_Num;
    return os;
}

void printDisassembly( tMCUState& rState, uint16_t memPos, unsigned totalInstructions )
{
    for( unsigned currentInstruction = 0; currentInstruction < totalInstructions; ++currentInstruction )
    {
        std::cout << "  " << tHexFormat( memPos ) << " : ";

        // Print out the binary data relevant to the instruction
        unsigned instructionBytes = rState.decodeFullOpcodeLength( memPos );
        for( unsigned byteIndex = 0; byteIndex < instructionBytes; ++byteIndex )
            std::cout << tHexFormat( rState.memReadByte( memPos + byteIndex ) ) << " ";

        // Pad up to 5 data bytes worth to align the display
        for( unsigned padIndex = instructionBytes ; padIndex < 5; ++padIndex )
            std::cout << "   ";

        std::cout << rState.decodeFullOpcode( memPos ) << std::endl;

        memPos += instructionBytes;
    }
}

void printState( tMCUState& mcu )
{
    std::cout
        << "A=" << tHexFormat( mcu.regA ) << "  X=" << tHexFormat( mcu.regX ) << "  Y=" << tHexFormat( mcu.regY ) << "  S=" << tHexFormat( mcu.regSP ) << "  PC=" << tHexFormat( mcu.regPC ) << std::endl
        << "P=" << tHexFormat( mcu.regP ) << "  ";

    const char *pFlagNames[] = { "C", "Z", "I", "D", "B", "X", "V", "N" };

    for( unsigned bitPos = 0; bitPos < 8; ++bitPos )
        std::cout << (mcu.isFlagSet( eFlags(1<< bitPos) ) ? " " : "N" ) << pFlagNames[bitPos] << " ";

    std::cout << std::endl;

    printDisassembly( mcu, mcu.regPC, 1 );

/*    flag_C = 0x01, // Carry
    flag_Z = 0x02, // Zero
    flag_I = 0x04, // IRQ
    flag_D = 0x08, // Decimal
    flag_B = 0x10, // Break
    flag_X = 0x20, // Undefined (?) - always set
    flag_V = 0x40, // Sign bit overflow
    flag_N = 0x80, // Negative*/
}

void load_rom( uint8_t *pMemory );
void load_brk( uint8_t *pMemory );

void freeRunMode( tMCUState& mcu )
{
    while( true )
    {
        mcu.pcExecute();

        if( _kbhit() )
        {
            int ch = _getch();

            if( ch == 0 )
            {
                // Escape code - go into debugger
                // So push keys like F1-F12 to get into the debugger, otherwise
                // it goes into the serial port
                _getch();
                break;
            }
            else
                mcu.serialToMCUPushByte( ch );
        }

        if( !mcu.serialFromMCUEmpty() )
            std::cout << mcu.serialFromMCUPopByte();
    }
}

// Enters debugging mode
// Returns:
//   true - to continue into free run mode
//  false - to exit the debugger
bool debugMode( tMCUState& mcu );

int main( int argc, char *argv[] )
{
    const unsigned cMemSize = 65536;
    uint8_t mcuMemory[cMemSize];

    memset( mcuMemory, 0, cMemSize );

    load_rom( mcuMemory );
    load_brk( mcuMemory );
	mcuMemory[0xFFFC] = 0x00;	//RESET vector
	mcuMemory[0xFFFD] = 0xE8;
	mcuMemory[0xFFFE] = 0x00;	//IRQ(BRK) vector
	mcuMemory[0xFFFF] = 0x10;

    tMCUState mcu( mcuMemory );

    while( true )
    {
        freeRunMode( mcu );

        // Broken out of free run mode, into the debugger
        if( !debugMode( mcu ) )
            break;
    }

    return 0;
}


void load_rom( uint8_t *pMemory )
{
	int i;
	static unsigned char rawData[4560] = {
		0x4C, 0x4C, 0xE9, 0x4C, 0x88, 0xE8, 0x4C, 0xB9, 0xE8, 0x4C, 0xB6, 0xE8,
		0x4C, 0xB1, 0xE8, 0x4C, 0xA2, 0xE8, 0x4C, 0x99, 0xE8, 0x4C, 0x95, 0xE8,
		0x4C, 0x3C, 0xE9, 0x4C, 0x42, 0xE9, 0x4C, 0x34, 0xE9, 0x4C, 0x2E, 0xE9,
		0x4C, 0x38, 0xE9, 0x4C, 0xC1, 0xE8, 0x4C, 0xC5, 0xE8, 0x20, 0x50, 0x43,
		0x3D, 0x20, 0x20, 0x41, 0x3D, 0x20, 0x20, 0x58, 0x3D, 0x20, 0x20, 0x59,
		0x3D, 0x20, 0x20, 0x53, 0x3D, 0x20, 0x20, 0x50, 0x3D, 0x20, 0x28, 0x4E,
		0x56, 0x52, 0x42, 0x44, 0x49, 0x5A, 0x43, 0x29, 0x3D, 0x20, 0x88, 0xE8,
		0xA2, 0xFF, 0xA0, 0xFF, 0xC8, 0xB9, 0x2D, 0xE8, 0x20, 0x38, 0xE9, 0xC9,
		0x3D, 0xD0, 0xF5, 0xE8, 0xE0, 0x07, 0xF0, 0x0C, 0xBD, 0xE0, 0x04, 0x20,
		0x99, 0xE8, 0xE0, 0x00, 0xD0, 0xE6, 0x80, 0xEF, 0xCA, 0xBD, 0xE0, 0x04,
		0xA2, 0x08, 0x2A, 0xA8, 0xA9, 0x31, 0xB0, 0x01, 0x3A, 0x20, 0x38, 0xE9,
		0x98, 0xCA, 0xD0, 0xF2, 0x48, 0xA9, 0x0D, 0x20, 0x38, 0xE9, 0xA9, 0x0A,
		0x20, 0x38, 0xE9, 0x68, 0x60, 0x20, 0x99, 0xE8, 0x8A, 0x48, 0x4A, 0x4A,
		0x4A, 0x4A, 0x20, 0xA2, 0xE8, 0x68, 0x5A, 0x29, 0x0F, 0xA8, 0xB9, 0x14,
		0xF0, 0x7A, 0x4C, 0x38, 0xE9, 0x20, 0xB9, 0xE8, 0xCA, 0xE0, 0x00, 0xD0,
		0xF8, 0x60, 0x20, 0xB9, 0xE8, 0xA9, 0x20, 0x4C, 0x38, 0xE9, 0xA9, 0x21,
		0x2C, 0xA9, 0x3E, 0x85, 0x32, 0x20, 0x88, 0xE8, 0xA5, 0x32, 0x20, 0x38,
		0xE9, 0xA0, 0xFF, 0x20, 0x2E, 0xE9, 0xC9, 0x20, 0xB0, 0x3D, 0xC9, 0x0D,
		0xF0, 0x4A, 0xC9, 0x1B, 0xF0, 0xE7, 0xC9, 0x08, 0xF0, 0x09, 0xC9, 0x09,
		0xF0, 0x1B, 0xC9, 0x02, 0xD0, 0xE5, 0x00, 0xC0, 0xFF, 0xF0, 0xE0, 0x88,
		0xA9, 0x08, 0x20, 0x38, 0xE9, 0xA9, 0x20, 0x20, 0x38, 0xE9, 0xA9, 0x08,
		0x20, 0x38, 0xE9, 0x80, 0xCE, 0xA9, 0x20, 0xC8, 0x30, 0x1F, 0x99, 0x00,
		0x04, 0x20, 0x38, 0xE9, 0x98, 0x29, 0x07, 0xD0, 0xF0, 0x80, 0xBC, 0xC9,
		0x61, 0x90, 0x02, 0xE9, 0x20, 0xC8, 0x30, 0x09, 0x99, 0x00, 0x04, 0x20,
		0x38, 0xE9, 0x80, 0xAB, 0xC8, 0xA9, 0x0D, 0x99, 0x00, 0x04, 0x20, 0x38,
		0xE9, 0x60, 0xAD, 0x03, 0x03, 0xF0, 0xFB, 0x60, 0xAD, 0x03, 0x03, 0x60,
		0x8D, 0x02, 0x03, 0x60, 0xA9, 0x07, 0x20, 0x38, 0xE9, 0x60, 0x48, 0x3A,
		0xD0, 0xFD, 0x68, 0x3A, 0xD0, 0xF8, 0x60, 0x60, 0x20, 0x3C, 0xE9, 0x20,
		0xCF, 0xE9, 0xA2, 0xFF, 0x9A, 0x20, 0xC1, 0xE8, 0xA9, 0x00, 0xA8, 0x85,
		0x33, 0x85, 0x37, 0x64, 0x3C, 0x64, 0x3D, 0x20, 0x88, 0xE9, 0xA2, 0x11,
		0xDD, 0x24, 0xF0, 0xF0, 0x05, 0xCA, 0x10, 0xF8, 0x80, 0xE0, 0xDA, 0x5A,
		0x8A, 0x0A, 0xAA, 0x20, 0x85, 0xE9, 0x7A, 0xFA, 0xF0, 0xD4, 0xBD, 0x5A,
		0xF0, 0x30, 0xDC, 0x80, 0xD8, 0x7C, 0x36, 0xF0, 0x64, 0x35, 0x80, 0x16,
		0x8A, 0xA2, 0x04, 0x06, 0x3C, 0x26, 0x3D, 0xCA, 0xD0, 0xF9, 0x24, 0x3C,
		0x08, 0x48, 0x05, 0x3C, 0x85, 0x3C, 0x68, 0x28, 0xC6, 0x35, 0xB9, 0x00,
		0x04, 0xA2, 0x0F, 0xC8, 0xDD, 0x14, 0xF0, 0xF0, 0xDF, 0xCA, 0x10, 0xF8,
		0x60, 0xA9, 0x8A, 0x85, 0x3A, 0xA9, 0xF3, 0x85, 0x3B, 0x80, 0x0F, 0xC9,
		0x7E, 0xF0, 0x05, 0x20, 0x38, 0xE9, 0x80, 0x03, 0x20, 0x88, 0xE8, 0x20,
		0x81, 0xEA, 0xB2, 0x3A, 0xD0, 0xED, 0x60, 0x20, 0x88, 0xE8, 0xA2, 0xFF,
		0xA9, 0x0D, 0xE8, 0x20, 0x38, 0xE9, 0xBD, 0x74, 0xF9, 0xD0, 0xF7, 0x60,
		0x20, 0xE9, 0xE9, 0xA2, 0xFF, 0x9A, 0x4C, 0x52, 0xE9, 0x6C, 0x3C, 0x00,
		0xA6, 0x3C, 0xA5, 0x3D, 0x86, 0x3A, 0x85, 0x3B, 0xE6, 0x33, 0x60, 0xC0,
		0x01, 0xD0, 0x0C, 0xA5, 0x3A, 0x09, 0x0F, 0x85, 0x3C, 0xA5, 0x3B, 0x85,
		0x3D, 0x80, 0x17, 0xA5, 0x35, 0xF0, 0x5A, 0xA6, 0x37, 0xF0, 0x0A, 0xCA,
		0xF0, 0x1C, 0xA5, 0x3C, 0x92, 0x3A, 0x4C, 0x81, 0xEA, 0x20, 0xEC, 0xE9,
		0x80, 0x10, 0xA5, 0x3A, 0x89, 0x0F, 0xF0, 0x0A, 0xC0, 0x00, 0xF0, 0x46,
		0x89, 0x07, 0xF0, 0x11, 0x80, 0x19, 0x20, 0x88, 0xE8, 0x20, 0x34, 0xE9,
		0xB0, 0x2D, 0xA5, 0x3B, 0xA6, 0x3A, 0x20, 0x95, 0xE8, 0xA9, 0x20, 0x20,
		0x38, 0xE9, 0xA9, 0x2D, 0x20, 0x38, 0xE9, 0xA9, 0x20, 0x20, 0x38, 0xE9,
		0xC0, 0x00, 0xF0, 0x1E, 0xB2, 0x3A, 0x20, 0x99, 0xE8, 0x38, 0xA5, 0x3A,
		0xE5, 0x3C, 0xA5, 0x3B, 0xE5, 0x3D, 0x20, 0x81, 0xEA, 0x90, 0xBB, 0x64,
		0x37, 0x60, 0x5A, 0xA0, 0x00, 0x20, 0x07, 0xEA, 0x7A, 0x60, 0xB2, 0x3A,
		0x29, 0x7F, 0xC9, 0x7F, 0xF0, 0x04, 0xC9, 0x20, 0xB0, 0x02, 0xA9, 0x2E,
		0x20, 0x38, 0xE9, 0x80, 0xD4, 0xE6, 0x3A, 0xD0, 0x02, 0xE6, 0x3B, 0x60,
		0xA5, 0x33, 0xF0, 0x3E, 0x38, 0xA5, 0x3C, 0xE5, 0x3A, 0xAA, 0xA5, 0x3D,
		0xE5, 0x3B, 0xA8, 0x90, 0x31, 0x18, 0x8A, 0x65, 0x3E, 0x85, 0x3C, 0x98,
		0x65, 0x3F, 0x85, 0x3D, 0xB2, 0x3E, 0x92, 0x3C, 0xA9, 0xFF, 0xC6, 0x3C,
		0xC5, 0x3C, 0xD0, 0x02, 0xC6, 0x3D, 0xC6, 0x3E, 0xC5, 0x3E, 0xD0, 0x02,
		0xC6, 0x3F, 0x38, 0xA5, 0x3E, 0xE5, 0x3A, 0xA5, 0x3F, 0xE5, 0x3B, 0x90,
		0x05, 0x20, 0x34, 0xE9, 0x90, 0xDA, 0x60, 0xA5, 0x33, 0xD0, 0x0D, 0x60,
		0xE6, 0x3A, 0xD0, 0x02, 0xE6, 0x3B, 0xE6, 0x3C, 0xD0, 0x02, 0xE6, 0x3D,
		0x38, 0xA5, 0x3E, 0xE5, 0x3A, 0xA5, 0x3F, 0xE5, 0x3B, 0x90, 0xE8, 0x20,
		0x34, 0xE9, 0xB0, 0xE3, 0xB2, 0x3A, 0x92, 0x3C, 0x80, 0xDE, 0xB2, 0x3A,
		0x52, 0x3C, 0x30, 0xFA, 0x80, 0xD6, 0xA5, 0x3A, 0x48, 0xA5, 0x3B, 0x48,
		0xA9, 0xCB, 0x85, 0x3A, 0xA9, 0xEA, 0x85, 0x3B, 0xA0, 0x2E, 0xB1, 0x3A,
		0x99, 0x80, 0x02, 0x88, 0x10, 0xF8, 0xA9, 0xEA, 0x8D, 0xA5, 0x02, 0x8D,
		0xA6, 0x02, 0x8D, 0x9C, 0x02, 0x8D, 0x9D, 0x02, 0x8D, 0x9E, 0x02, 0x8D,
		0x9F, 0x02, 0x8D, 0xA0, 0x02, 0x68, 0x85, 0x3B, 0x68, 0x85, 0x3A, 0x4C,
		0x80, 0x02, 0xA6, 0x3C, 0xA5, 0x3D, 0x86, 0x3E, 0x85, 0x3F, 0x60, 0xA5,
		0x33, 0xF0, 0x29, 0xA5, 0x3A, 0xA6, 0x3B, 0x85, 0x38, 0x86, 0x39, 0x38,
		0xA5, 0x38, 0xE5, 0x3A, 0xA5, 0x39, 0xE5, 0x3B, 0x90, 0x15, 0x20, 0x80,
		0xEB, 0x20, 0x34, 0xE9, 0xB0, 0x0D, 0x38, 0xA5, 0x3C, 0xE5, 0x38, 0xA5,
		0x3D, 0xE5, 0x39, 0xB0, 0xE2, 0x64, 0x33, 0x60, 0xA5, 0x35, 0xF0, 0x08,
		0xA6, 0x3C, 0xA5, 0x3D, 0x86, 0x38, 0x85, 0x39, 0xA9, 0x14, 0x85, 0x33,
		0x20, 0x80, 0xEB, 0xC6, 0x33, 0xD0, 0xF9, 0x60, 0x20, 0x88, 0xE8, 0x20,
		0x92, 0xEB, 0x18, 0xA5, 0x38, 0x65, 0x35, 0x85, 0x38, 0x90, 0x02, 0xE6,
		0x39, 0x60, 0xB2, 0x38, 0xAA, 0xBD, 0x6C, 0xF0, 0x85, 0x36, 0xBD, 0x6C,
		0xF1, 0x29, 0x0F, 0x85, 0x34, 0xAA, 0xBD, 0x6C, 0xF2, 0x85, 0x35, 0xA5,
		0x39, 0xA6, 0x38, 0x20, 0x95, 0xE8, 0xA9, 0x2D, 0x20, 0x38, 0xE9, 0x20,
		0xB6, 0xE8, 0xA2, 0x01, 0xA0, 0x00, 0xC4, 0x35, 0xB0, 0x0B, 0xB1, 0x38,
		0xE0, 0x00, 0xD0, 0x0E, 0x20, 0x99, 0xE8, 0x80, 0x07, 0xE0, 0x00, 0xD0,
		0x03, 0x20, 0xB6, 0xE8, 0xA9, 0x20, 0x29, 0x7F, 0xC9, 0x7F, 0xF0, 0x04,
		0xC9, 0x20, 0xB0, 0x02, 0xA9, 0x2E, 0x20, 0x38, 0xE9, 0xC8, 0xC0, 0x03,
		0x90, 0xD4, 0x20, 0xB6, 0xE8, 0xCA, 0xF0, 0xCC, 0xA5, 0x36, 0x0A, 0x65,
		0x36, 0xAA, 0xA0, 0xFD, 0xBD, 0xAC, 0xF2, 0x20, 0x38, 0xE9, 0xE8, 0xC8,
		0xD0, 0xF6, 0xA5, 0x36, 0xC9, 0x42, 0x30, 0x19, 0xC9, 0x46, 0x10, 0x15,
		0xB2, 0x38, 0x4A, 0x4A, 0x4A, 0x4A, 0x29, 0x07, 0x09, 0x30, 0x20, 0x38,
		0xE9, 0xA9, 0x20, 0x20, 0x38, 0xE9, 0x4C, 0x20, 0xEC, 0x20, 0xB6, 0xE8,
		0xA5, 0x34, 0x0A, 0xAA, 0x7C, 0x7C, 0xF2, 0xA9, 0x23, 0x20, 0x38, 0xE9,
		0xA9, 0x24, 0x20, 0x38, 0xE9, 0xA0, 0x01, 0xB1, 0x38, 0x4C, 0x99, 0xE8,
		0x20, 0x2C, 0xEC, 0xA9, 0x2C, 0x20, 0x38, 0xE9, 0xA9, 0x58, 0x4C, 0x38,
		0xE9, 0x20, 0x2C, 0xEC, 0xA9, 0x2C, 0x20, 0x38, 0xE9, 0xA9, 0x59, 0x4C,
		0x38, 0xE9, 0x20, 0x98, 0xEC, 0x20, 0x2C, 0xEC, 0xA9, 0x29, 0x4C, 0x38,
		0xE9, 0x20, 0x98, 0xEC, 0x20, 0x2C, 0xEC, 0x20, 0x3B, 0xEC, 0x80, 0xF0,
		0x20, 0x52, 0xEC, 0x80, 0xDB, 0xA9, 0x24, 0x20, 0x38, 0xE9, 0xA0, 0x02,
		0x20, 0x33, 0xEC, 0x88, 0x80, 0xB9, 0x20, 0x6D, 0xEC, 0x80, 0xBC, 0x20,
		0x6D, 0xEC, 0x80, 0xC4, 0x20, 0x98, 0xEC, 0x20, 0x6D, 0xEC, 0x80, 0xCC,
		0x20, 0x98, 0xEC, 0x20, 0x6D, 0xEC, 0x20, 0x3B, 0xEC, 0x80, 0xC1, 0x60,
		0xA9, 0x28, 0x4C, 0x38, 0xE9, 0x20, 0x2C, 0xEC, 0xA9, 0x2C, 0x20, 0x38,
		0xE9, 0xA9, 0x24, 0x20, 0x38, 0xE9, 0xA0, 0x02, 0xB1, 0x38, 0x85, 0x37,
		0x18, 0xA5, 0x38, 0x69, 0x03, 0x4C, 0xC8, 0xEC, 0xA9, 0x24, 0x20, 0x38,
		0xE9, 0xA0, 0x01, 0xB1, 0x38, 0x85, 0x37, 0x18, 0xA5, 0x38, 0x69, 0x02,
		0xAA, 0xA5, 0x39, 0x69, 0x00, 0xA8, 0x18, 0x8A, 0x65, 0x37, 0xAA, 0x98,
		0xA4, 0x37, 0x10, 0x01, 0x3A, 0x69, 0x00, 0x4C, 0x95, 0xE8, 0xBA, 0xE8,
		0xE8, 0xE8, 0xE8, 0x9E, 0x00, 0x01, 0x20, 0xCF, 0xE9, 0x4C, 0x0C, 0xED,
		0xA9, 0xB6, 0x85, 0x3A, 0xA9, 0xF7, 0x85, 0x3B, 0x80, 0x0F, 0xC9, 0x7E,
		0xF0, 0x05, 0x20, 0x38, 0xE9, 0x80, 0x03, 0x20, 0x88, 0xE8, 0x20, 0x81,
		0xEA, 0xB2, 0x3A, 0xD0, 0xED, 0x20, 0xDA, 0xEF, 0xA2, 0xFF, 0x9A, 0x64,
		0x35, 0x20, 0xBE, 0xE8, 0xA0, 0x00, 0xAD, 0x00, 0x04, 0xC9, 0x0D, 0xD0,
		0x03, 0x4C, 0x52, 0xE9, 0xC9, 0x3F, 0xF0, 0xC8, 0xC9, 0x20, 0xF0, 0x3B,
		0xC9, 0x3B, 0xF0, 0xE0, 0xC9, 0x4C, 0xF0, 0x2C, 0xC9, 0x24, 0xD0, 0x01,
		0xC8, 0x64, 0x3C, 0x64, 0x3D, 0x20, 0x88, 0xE9, 0xA6, 0x35, 0xF0, 0x08,
		0xC9, 0x4C, 0xF0, 0x1A, 0xC9, 0x20, 0xF0, 0x1B, 0x98, 0xAA, 0xA9, 0x0A,
		0x20, 0x38, 0xE9, 0x20, 0xB1, 0xE8, 0xA9, 0x5E, 0x20, 0x38, 0xE9, 0x20,
		0x3C, 0xE9, 0x80, 0xB0, 0x64, 0x35, 0x20, 0x68, 0xEB, 0x80, 0xA9, 0xA5,
		0x35, 0xF0, 0x0A, 0xA6, 0x3C, 0xA5, 0x3D, 0x86, 0x3A, 0x85, 0x3B, 0x88,
		0xC8, 0xB9, 0x00, 0x04, 0xC9, 0x20, 0xF0, 0xF8, 0xC9, 0x0D, 0xF0, 0xE5,
		0xC9, 0x3B, 0xF0, 0xE1, 0xA2, 0x00, 0x86, 0x36, 0x84, 0x33, 0xA4, 0x33,
		0xA5, 0x36, 0x0A, 0x65, 0x36, 0xAA, 0xB9, 0x00, 0x04, 0xC8, 0xDD, 0xAC,
		0xF2, 0xD0, 0x14, 0xB9, 0x00, 0x04, 0xE8, 0xC8, 0xDD, 0xAC, 0xF2, 0xD0,
		0x0A, 0xB9, 0x00, 0x04, 0xE8, 0xC8, 0xDD, 0xAC, 0xF2, 0xF0, 0x0C, 0xA6,
		0x36, 0xE8, 0x86, 0x36, 0xE0, 0x4A, 0xD0, 0xD2, 0x4C, 0x48, 0xED, 0xA9,
		0x00, 0x85, 0x34, 0xC6, 0x34, 0x85, 0x3C, 0x85, 0x3D, 0x85, 0x35, 0xA6,
		0x36, 0xE0, 0x42, 0x30, 0x18, 0xE0, 0x46, 0x10, 0x14, 0xB9, 0x00, 0x04,
		0xC8, 0xC9, 0x38, 0x10, 0xDF, 0xC9, 0x30, 0x30, 0xDB, 0x0A, 0x0A, 0x0A,
		0x0A, 0x85, 0x39, 0xA9, 0x80, 0xBE, 0x00, 0x04, 0xC8, 0xE0, 0x20, 0xD0,
		0x24, 0xC9, 0x80, 0x30, 0xF4, 0xA6, 0x36, 0xE0, 0x44, 0x10, 0xEE, 0xA6,
		0x35, 0xF0, 0xEA, 0xC9, 0xD0, 0x10, 0xE6, 0xC9, 0xC0, 0x10, 0xB5, 0xA6,
		0x3D, 0xD0, 0xB1, 0xA6, 0x3C, 0x86, 0x38, 0x09, 0x40, 0x29, 0xF7, 0x80,
		0xD4, 0xE0, 0x0D, 0xD0, 0x03, 0x4C, 0xCB, 0xEE, 0xE0, 0x3B, 0xF0, 0xF9,
		0x48, 0xA5, 0x36, 0xC9, 0x46, 0x30, 0x44, 0xD0, 0x19, 0xE0, 0x24, 0xF0,
		0x01, 0x88, 0x20, 0x88, 0xE9, 0xFA, 0xA6, 0x35, 0xF0, 0x86, 0xA0, 0x00,
		0xA9, 0x01, 0x48, 0xA5, 0x3C, 0x91, 0x3A, 0x4C, 0x66, 0xEF, 0xC9, 0x47,
		0xD0, 0x1E, 0xE0, 0x24, 0xF0, 0x01, 0x88, 0x20, 0x88, 0xE9, 0xFA, 0xA6,
		0x35, 0xF0, 0x7D, 0xA0, 0x00, 0xA9, 0x02, 0x48, 0xA5, 0x3C, 0x91, 0x3A,
		0xA5, 0x3D, 0xC8, 0x91, 0x3A, 0x4C, 0x66, 0xEF, 0xC9, 0x48, 0xD0, 0x68,
		0x4C, 0xAC, 0xEF, 0x68, 0xE0, 0x23, 0xD0, 0x05, 0x09, 0x20, 0x4C, 0xE1,
		0xED, 0xE0, 0x28, 0xD0, 0x0B, 0x09, 0x04, 0xA6, 0x34, 0x10, 0x51, 0xE6,
		0x34, 0x4C, 0xE1, 0xED, 0xE0, 0x29, 0xD0, 0x09, 0xA6, 0x34, 0xD0, 0x44,
		0xE6, 0x34, 0x4C, 0xE1, 0xED, 0xE0, 0x2C, 0xD0, 0x1E, 0xBE, 0x00, 0x04,
		0xE0, 0x58, 0xD0, 0x06, 0x09, 0x02, 0xC8, 0x4C, 0xE1, 0xED, 0xE0, 0x59,
		0xF0, 0x07, 0xC9, 0x80, 0x30, 0x26, 0x4C, 0xED, 0xED, 0x09, 0x01, 0xC8,
		0x4C, 0xE1, 0xED, 0xE0, 0x24, 0xF0, 0x01, 0x88, 0x48, 0x20, 0x88, 0xE9,
		0x88, 0x68, 0xA6, 0x35, 0xF0, 0x0E, 0xA6, 0x3D, 0xD0, 0x05, 0x09, 0x08,
		0x4C, 0xE1, 0xED, 0x09, 0x10, 0x4C, 0xE1, 0xED, 0x4C, 0x48, 0xED, 0xA2,
		0x0F, 0xDD, 0x9C, 0xF2, 0xF0, 0x05, 0xCA, 0x10, 0xF8, 0x80, 0xF1, 0x86,
		0x37, 0xC9, 0x80, 0x30, 0x05, 0x8A, 0x05, 0x39, 0x85, 0x37, 0xA2, 0x00,
		0xBD, 0x6C, 0xF0, 0xC5, 0x36, 0xD0, 0x07, 0xBD, 0x6C, 0xF1, 0xC5, 0x37,
		0xF0, 0x2D, 0xE8, 0xD0, 0xEF, 0xA5, 0x37, 0xC9, 0x02, 0xD0, 0x06, 0xA9,
		0x01, 0x85, 0x37, 0x80, 0xE1, 0xC9, 0x01, 0xD0, 0x06, 0xA9, 0x0A, 0x85,
		0x37, 0x80, 0xD7, 0xC9, 0x0D, 0xD0, 0x06, 0xA9, 0x0B, 0x85, 0x37, 0x80,
		0xCD, 0xC9, 0x07, 0xD0, 0xAF, 0xA9, 0x09, 0x85, 0x37, 0x80, 0xC3, 0xA5,
		0x37, 0x29, 0x0F, 0x85, 0x37, 0xC9, 0x0E, 0xD0, 0x0B, 0x20, 0x73, 0xEF,
		0x85, 0x3D, 0xA5, 0x38, 0x85, 0x3C, 0x80, 0x07, 0xC9, 0x0A, 0xD0, 0x03,
		0x20, 0x8B, 0xEF, 0xA0, 0x00, 0x8A, 0x91, 0x3A, 0xC8, 0xA6, 0x37, 0xBD,
		0x6C, 0xF2, 0x48, 0xC9, 0x01, 0xF0, 0x10, 0xA5, 0x3C, 0x91, 0x3A, 0xC8,
		0xBD, 0x6C, 0xF2, 0xC9, 0x02, 0xF0, 0x04, 0xA5, 0x3D, 0x91, 0x3A, 0xA5,
		0x3A, 0x85, 0x38, 0xA5, 0x3B, 0x85, 0x39, 0x20, 0x92, 0xEB, 0x18, 0x68,
		0x65, 0x3A, 0x85, 0x3A, 0x90, 0x02, 0xE6, 0x3B, 0x4C, 0x0C, 0xED, 0x20,
		0x7A, 0xEF, 0xE9, 0x03, 0x80, 0x16, 0x38, 0xA5, 0x3C, 0xE5, 0x3A, 0x85,
		0x3E, 0xA5, 0x3D, 0xE5, 0x3B, 0x85, 0x3F, 0x38, 0xA5, 0x3E, 0x60, 0x20,
		0x7A, 0xEF, 0xE9, 0x02, 0x85, 0x3E, 0xB0, 0x02, 0xC6, 0x3F, 0xA5, 0x3F,
		0xF0, 0x0B, 0xC9, 0xFF, 0xD0, 0x0B, 0xA5, 0x3E, 0x10, 0x07, 0x85, 0x3C,
		0x60, 0xA5, 0x3E, 0x10, 0xF9, 0x4C, 0x48, 0xED, 0xFA, 0x88, 0x98, 0xAA,
		0xA0, 0xFE, 0xC8, 0xBD, 0x00, 0x04, 0xE8, 0xC9, 0x0D, 0xF0, 0x1A, 0xC9,
		0x27, 0xD0, 0x06, 0xC0, 0xFF, 0xD0, 0x12, 0x80, 0xED, 0xC0, 0xFF, 0xF0,
		0x04, 0x91, 0x3A, 0x80, 0xE5, 0xC9, 0x20, 0xF0, 0xE2, 0x8A, 0xA8, 0x80,
		0xD4, 0x98, 0x48, 0x4C, 0x66, 0xEF, 0xA0, 0x49, 0xA2, 0x00, 0x8A, 0x29,
		0x0F, 0xD0, 0x03, 0x20, 0x88, 0xE8, 0xBD, 0xAC, 0xF2, 0x20, 0x38, 0xE9,
		0xE8, 0xBD, 0xAC, 0xF2, 0x20, 0x38, 0xE9, 0xE8, 0xBD, 0xAC, 0xF2, 0x20,
		0x38, 0xE9, 0xE8, 0xC0, 0x08, 0x10, 0x09, 0xC0, 0x04, 0x30, 0x05, 0xA9,
		0x78, 0x20, 0x38, 0xE9, 0xA9, 0x20, 0x20, 0x38, 0xE9, 0x88, 0xD0, 0xCE,
		0x20, 0x88, 0xE8, 0x60, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
		0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x0D, 0x20, 0x2E, 0x3A,
		0x3E, 0x3F, 0x21, 0x47, 0x49, 0x4C, 0x4D, 0x51, 0x52, 0x40, 0x23, 0x55,
		0x56, 0x57, 0xF7, 0xE9, 0x07, 0xEA, 0xEC, 0xE9, 0xEC, 0xE9, 0x32, 0xEB,
		0xB1, 0xE9, 0xDE, 0xEC, 0xE0, 0xE9, 0x88, 0xEA, 0x3B, 0xEB, 0xCB, 0xEA,
		0x66, 0xEA, 0x51, 0xE8, 0x00, 0xBC, 0x00, 0x00, 0x4B, 0xE9, 0xCF, 0xE9,
		0xFA, 0xEA, 0x00, 0xFF, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x23, 0x49, 0x49,
		0x3B, 0x23, 0x02, 0x44, 0x25, 0x23, 0x02, 0x49, 0x3B, 0x23, 0x02, 0x42,
		0x09, 0x23, 0x23, 0x49, 0x3A, 0x23, 0x02, 0x44, 0x0E, 0x23, 0x19, 0x49,
		0x3A, 0x23, 0x02, 0x42, 0x1D, 0x01, 0x49, 0x49, 0x06, 0x01, 0x2C, 0x44,
		0x29, 0x01, 0x2C, 0x49, 0x06, 0x01, 0x2C, 0x42, 0x07, 0x01, 0x01, 0x49,
		0x06, 0x01, 0x2C, 0x44, 0x31, 0x01, 0x15, 0x49, 0x06, 0x01, 0x2C, 0x42,
		0x2E, 0x18, 0x49, 0x49, 0x49, 0x18, 0x21, 0x44, 0x24, 0x18, 0x21, 0x49,
		0x1C, 0x18, 0x21, 0x42, 0x0C, 0x18, 0x18, 0x49, 0x49, 0x18, 0x21, 0x44,
		0x10, 0x18, 0x27, 0x49, 0x49, 0x18, 0x21, 0x42, 0x2F, 0x00, 0x49, 0x49,
		0x37, 0x00, 0x2D, 0x44, 0x28, 0x00, 0x2D, 0x49, 0x1C, 0x00, 0x2D, 0x42,
		0x0D, 0x00, 0x00, 0x49, 0x37, 0x00, 0x2D, 0x44, 0x33, 0x00, 0x2B, 0x49,
		0x1C, 0x00, 0x2D, 0x42, 0x0A, 0x34, 0x49, 0x49, 0x36, 0x34, 0x35, 0x45,
		0x17, 0x06, 0x3D, 0x49, 0x36, 0x34, 0x35, 0x43, 0x03, 0x34, 0x34, 0x49,
		0x36, 0x34, 0x35, 0x45, 0x3F, 0x34, 0x3E, 0x49, 0x37, 0x34, 0x37, 0x43,
		0x20, 0x1E, 0x1F, 0x49, 0x20, 0x1E, 0x1F, 0x45, 0x39, 0x1E, 0x38, 0x49,
		0x20, 0x1E, 0x1F, 0x43, 0x04, 0x1E, 0x1E, 0x49, 0x20, 0x1E, 0x1F, 0x45,
		0x11, 0x1E, 0x3C, 0x49, 0x20, 0x1E, 0x1F, 0x43, 0x14, 0x12, 0x49, 0x49,
		0x14, 0x12, 0x15, 0x45, 0x1B, 0x12, 0x16, 0x40, 0x14, 0x12, 0x15, 0x43,
		0x08, 0x12, 0x12, 0x49, 0x49, 0x12, 0x15, 0x45, 0x0F, 0x12, 0x26, 0x41,
		0x49, 0x12, 0x15, 0x43, 0x13, 0x30, 0x49, 0x49, 0x13, 0x30, 0x19, 0x45,
		0x1A, 0x30, 0x22, 0x49, 0x13, 0x30, 0x19, 0x43, 0x05, 0x30, 0x30, 0x49,
		0x49, 0x30, 0x19, 0x45, 0x32, 0x30, 0x2A, 0x49, 0x49, 0x30, 0x19, 0x43,
		0x03, 0x04, 0x03, 0x03, 0x02, 0x02, 0x02, 0x0F, 0x03, 0x00, 0x03, 0x03,
		0x01, 0x01, 0x01, 0x0E, 0x0A, 0x05, 0x0D, 0x03, 0x02, 0x06, 0x06, 0x1F,
		0x03, 0x09, 0x03, 0x03, 0x01, 0x08, 0x08, 0x1E, 0x01, 0x04, 0x03, 0x03,
		0x02, 0x02, 0x02, 0x2F, 0x03, 0x00, 0x03, 0x03, 0x01, 0x01, 0x01, 0x2E,
		0x0A, 0x05, 0x0D, 0x03, 0x06, 0x06, 0x06, 0x3F, 0x03, 0x09, 0x03, 0x03,
		0x08, 0x08, 0x08, 0x3E, 0x03, 0x04, 0x03, 0x03, 0x03, 0x02, 0x02, 0x4F,
		0x03, 0x00, 0x03, 0x03, 0x01, 0x01, 0x01, 0x4E, 0x0A, 0x05, 0x0D, 0x03,
		0x03, 0x06, 0x06, 0x5F, 0x03, 0x09, 0x03, 0x03, 0x03, 0x08, 0x08, 0x5E,
		0x03, 0x04, 0x03, 0x03, 0x02, 0x02, 0x02, 0x6F, 0x03, 0x00, 0x03, 0x03,
		0x0B, 0x01, 0x01, 0x6E, 0x0A, 0x05, 0x0D, 0x03, 0x06, 0x06, 0x06, 0x7F,
		0x03, 0x09, 0x03, 0x03, 0x0C, 0x08, 0x08, 0x7E, 0x0A, 0x04, 0x03, 0x03,
		0x02, 0x02, 0x02, 0x0F, 0x03, 0x00, 0x03, 0x03, 0x01, 0x01, 0x01, 0x0E,
		0x0A, 0x05, 0x0D, 0x03, 0x06, 0x06, 0x07, 0x1F, 0x03, 0x09, 0x03, 0x03,
		0x01, 0x08, 0x08, 0x1E, 0x00, 0x04, 0x00, 0x03, 0x02, 0x02, 0x02, 0x2F,
		0x03, 0x00, 0x03, 0x03, 0x01, 0x01, 0x01, 0x2E, 0x0A, 0x05, 0x0D, 0x03,
		0x06, 0x06, 0x07, 0x3F, 0x03, 0x09, 0x03, 0x03, 0x08, 0x08, 0x09, 0x3E,
		0x00, 0x04, 0x03, 0x03, 0x02, 0x02, 0x02, 0x4F, 0x03, 0x00, 0x03, 0x03,
		0x01, 0x01, 0x01, 0x4E, 0x0A, 0x05, 0x0D, 0x03, 0x03, 0x06, 0x06, 0x5F,
		0x03, 0x09, 0x03, 0x03, 0x03, 0x08, 0x08, 0x5E, 0x00, 0x04, 0x03, 0x03,
		0x02, 0x02, 0x02, 0x6F, 0x03, 0x00, 0x03, 0x03, 0x01, 0x01, 0x01, 0x6E,
		0x0A, 0x05, 0x0D, 0x03, 0x03, 0x06, 0x06, 0x7F, 0x03, 0x09, 0x03, 0x03,
		0x03, 0x08, 0x08, 0x7E, 0x02, 0x03, 0x02, 0x01, 0x02, 0x02, 0x02, 0x02,
		0x03, 0x03, 0x02, 0x03, 0x03, 0x02, 0x03, 0x02, 0x27, 0xEC, 0x6D, 0xEC,
		0x2C, 0xEC, 0x97, 0xEC, 0x5D, 0xEC, 0x68, 0xEC, 0x38, 0xEC, 0x45, 0xEC,
		0x7A, 0xEC, 0x7F, 0xEC, 0xB8, 0xEC, 0x84, 0xEC, 0x8C, 0xEC, 0x52, 0xEC,
		0x9D, 0xEC, 0x2C, 0xEC, 0x28, 0x10, 0x08, 0x00, 0x0E, 0x0D, 0x0A, 0x09,
		0x12, 0x11, 0x40, 0x14, 0x16, 0x0C, 0xD0, 0x88, 0x41, 0x44, 0x43, 0x41,
		0x4E, 0x44, 0x41, 0x53, 0x4C, 0x42, 0x43, 0x43, 0x42, 0x43, 0x53, 0x42,
		0x45, 0x51, 0x42, 0x49, 0x54, 0x42, 0x4D, 0x49, 0x42, 0x4E, 0x45, 0x42,
		0x50, 0x4C, 0x42, 0x52, 0x41, 0x42, 0x52, 0x4B, 0x42, 0x56, 0x43, 0x42,
		0x56, 0x53, 0x43, 0x4C, 0x43, 0x43, 0x4C, 0x44, 0x43, 0x4C, 0x49, 0x43,
		0x4C, 0x56, 0x43, 0x4D, 0x50, 0x43, 0x50, 0x58, 0x43, 0x50, 0x59, 0x44,
		0x45, 0x43, 0x44, 0x45, 0x58, 0x44, 0x45, 0x59, 0x45, 0x4F, 0x52, 0x49,
		0x4E, 0x43, 0x49, 0x4E, 0x58, 0x49, 0x4E, 0x59, 0x4A, 0x4D, 0x50, 0x4A,
		0x53, 0x52, 0x4C, 0x44, 0x41, 0x4C, 0x44, 0x58, 0x4C, 0x44, 0x59, 0x4C,
		0x53, 0x52, 0x4E, 0x4F, 0x50, 0x4F, 0x52, 0x41, 0x50, 0x48, 0x41, 0x50,
		0x48, 0x50, 0x50, 0x48, 0x58, 0x50, 0x48, 0x59, 0x50, 0x4C, 0x41, 0x50,
		0x4C, 0x50, 0x50, 0x4C, 0x58, 0x50, 0x4C, 0x59, 0x52, 0x4F, 0x4C, 0x52,
		0x4F, 0x52, 0x52, 0x54, 0x49, 0x52, 0x54, 0x53, 0x53, 0x42, 0x43, 0x53,
		0x45, 0x43, 0x53, 0x45, 0x44, 0x53, 0x45, 0x49, 0x53, 0x54, 0x41, 0x53,
		0x54, 0x58, 0x53, 0x54, 0x59, 0x53, 0x54, 0x5A, 0x54, 0x41, 0x58, 0x54,
		0x41, 0x59, 0x54, 0x52, 0x42, 0x54, 0x53, 0x42, 0x54, 0x53, 0x58, 0x54,
		0x58, 0x41, 0x54, 0x58, 0x53, 0x54, 0x59, 0x41, 0x57, 0x41, 0x49, 0x53,
		0x54, 0x50, 0x42, 0x42, 0x52, 0x42, 0x42, 0x53, 0x52, 0x4D, 0x42, 0x53,
		0x4D, 0x42, 0x2E, 0x44, 0x42, 0x2E, 0x44, 0x57, 0x2E, 0x44, 0x53, 0x3F,
		0x3F, 0x3F, 0x7E, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x63,
		0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20,
		0x3A, 0x7E, 0x53, 0x79, 0x6E, 0x74, 0x61, 0x78, 0x20, 0x3D, 0x20, 0x7B,
		0x7D, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2C, 0x20,
		0x5B, 0x5D, 0x20, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C, 0x2C,
		0x20, 0x48, 0x48, 0x48, 0x48, 0x20, 0x68, 0x65, 0x78, 0x20, 0x61, 0x64,
		0x64, 0x72, 0x65, 0x73, 0x73, 0x2C, 0x20, 0x44, 0x44, 0x20, 0x68, 0x65,
		0x78, 0x20, 0x64, 0x61, 0x74, 0x61, 0x7E, 0x7E, 0x5B, 0x48, 0x48, 0x48,
		0x48, 0x5D, 0x5B, 0x20, 0x48, 0x48, 0x48, 0x48, 0x5D, 0x7B, 0x52, 0x65,
		0x74, 0x75, 0x72, 0x6E, 0x7D, 0x20, 0x2D, 0x20, 0x48, 0x65, 0x78, 0x20,
		0x64, 0x75, 0x6D, 0x70, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
		0x28, 0x73, 0x29, 0x28, 0x75, 0x70, 0x20, 0x74, 0x6F, 0x20, 0x31, 0x36,
		0x20, 0x69, 0x66, 0x20, 0x6E, 0x6F, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65,
		0x73, 0x73, 0x20, 0x65, 0x6E, 0x74, 0x65, 0x72, 0x65, 0x64, 0x29, 0x7E,
		0x5B, 0x48, 0x48, 0x48, 0x48, 0x5D, 0x7B, 0x2E, 0x48, 0x48, 0x48, 0x48,
		0x7D, 0x7B, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x7D, 0x20, 0x2D, 0x20,
		0x48, 0x65, 0x78, 0x20, 0x64, 0x75, 0x6D, 0x70, 0x20, 0x72, 0x61, 0x6E,
		0x67, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
		0x73, 0x65, 0x73, 0x20, 0x28, 0x31, 0x36, 0x20, 0x70, 0x65, 0x72, 0x20,
		0x6C, 0x69, 0x6E, 0x65, 0x29, 0x7E, 0x5B, 0x48, 0x48, 0x48, 0x48, 0x5D,
		0x7B, 0x3A, 0x44, 0x44, 0x7D, 0x5B, 0x20, 0x44, 0x44, 0x5D, 0x7B, 0x52,
		0x65, 0x74, 0x75, 0x72, 0x6E, 0x7D, 0x20, 0x2D, 0x20, 0x43, 0x68, 0x61,
		0x6E, 0x67, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x62, 0x79, 0x74,
		0x65, 0x73, 0x7E, 0x5B, 0x48, 0x48, 0x48, 0x48, 0x5D, 0x7B, 0x47, 0x7D,
		0x7B, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x7D, 0x20, 0x2D, 0x20, 0x45,
		0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x20, 0x61, 0x20, 0x70, 0x72, 0x6F,
		0x67, 0x72, 0x61, 0x6D, 0x20, 0x28, 0x75, 0x73, 0x65, 0x20, 0x52, 0x54,
		0x53, 0x20, 0x74, 0x6F, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20,
		0x74, 0x6F, 0x20, 0x6D, 0x6F, 0x6E, 0x69, 0x74, 0x6F, 0x72, 0x29, 0x7E,
		0x7B, 0x48, 0x48, 0x48, 0x48, 0x2E, 0x48, 0x48, 0x48, 0x48, 0x3E, 0x48,
		0x48, 0x48, 0x48, 0x7B, 0x49, 0x7D, 0x7B, 0x52, 0x65, 0x74, 0x75, 0x72,
		0x6E, 0x7D, 0x20, 0x2D, 0x20, 0x6D, 0x6F, 0x76, 0x65, 0x20, 0x72, 0x61,
		0x6E, 0x67, 0x65, 0x20, 0x61, 0x74, 0x20, 0x32, 0x6E, 0x64, 0x20, 0x48,
		0x48, 0x48, 0x48, 0x20, 0x64, 0x6F, 0x77, 0x6E, 0x20, 0x74, 0x6F, 0x20,
		0x31, 0x73, 0x74, 0x20, 0x74, 0x6F, 0x20, 0x33, 0x72, 0x64, 0x20, 0x48,
		0x48, 0x48, 0x48, 0x7E, 0x5B, 0x48, 0x48, 0x48, 0x48, 0x5D, 0x7B, 0x4C,
		0x7D, 0x7B, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x7D, 0x20, 0x2D, 0x20,
		0x4C, 0x69, 0x73, 0x74, 0x20, 0x28, 0x64, 0x69, 0x73, 0x61, 0x73, 0x73,
		0x65, 0x6D, 0x62, 0x6C, 0x65, 0x29, 0x20, 0x32, 0x30, 0x20, 0x6C, 0x69,
		0x6E, 0x65, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x70, 0x72, 0x6F, 0x67, 0x72,
		0x61, 0x6D, 0x7E, 0x5B, 0x48, 0x48, 0x48, 0x48, 0x5D, 0x7B, 0x2E, 0x48,
		0x48, 0x48, 0x48, 0x7D, 0x7B, 0x4C, 0x7D, 0x7B, 0x52, 0x65, 0x74, 0x75,
		0x72, 0x6E, 0x7D, 0x20, 0x2D, 0x20, 0x44, 0x69, 0x73, 0x73, 0x61, 0x73,
		0x73, 0x65, 0x6D, 0x62, 0x6C, 0x65, 0x20, 0x61, 0x20, 0x72, 0x61, 0x6E,
		0x67, 0x65, 0x7E, 0x7B, 0x48, 0x48, 0x48, 0x48, 0x2E, 0x48, 0x48, 0x48,
		0x48, 0x3E, 0x48, 0x48, 0x48, 0x48, 0x7B, 0x4D, 0x7D, 0x7B, 0x52, 0x65,
		0x74, 0x75, 0x72, 0x6E, 0x7D, 0x20, 0x2D, 0x20, 0x4D, 0x6F, 0x76, 0x65,
		0x20, 0x72, 0x61, 0x6E, 0x67, 0x65, 0x20, 0x61, 0x74, 0x20, 0x31, 0x73,
		0x74, 0x20, 0x48, 0x48, 0x48, 0x48, 0x20, 0x74, 0x68, 0x72, 0x75, 0x20,
		0x32, 0x6E, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x33, 0x72, 0x64, 0x20, 0x48,
		0x48, 0x48, 0x48, 0x7E, 0x5B, 0x48, 0x48, 0x48, 0x48, 0x5D, 0x5B, 0x20,
		0x48, 0x48, 0x48, 0x48, 0x5D, 0x7B, 0x51, 0x7D, 0x7B, 0x52, 0x65, 0x74,
		0x75, 0x72, 0x6E, 0x7D, 0x20, 0x2D, 0x20, 0x54, 0x65, 0x78, 0x74, 0x20,
		0x64, 0x75, 0x6D, 0x70, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
		0x28, 0x73, 0x29, 0x7E, 0x5B, 0x48, 0x48, 0x48, 0x48, 0x5D, 0x7B, 0x2E,
		0x48, 0x48, 0x48, 0x48, 0x7D, 0x7B, 0x51, 0x7D, 0x7B, 0x52, 0x65, 0x74,
		0x75, 0x72, 0x6E, 0x7D, 0x20, 0x2D, 0x20, 0x54, 0x65, 0x78, 0x74, 0x20,
		0x64, 0x75, 0x6D, 0x70, 0x20, 0x72, 0x61, 0x6E, 0x67, 0x65, 0x20, 0x6F,
		0x66, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x20,
		0x28, 0x31, 0x36, 0x20, 0x70, 0x65, 0x72, 0x20, 0x6C, 0x69, 0x6E, 0x65,
		0x29, 0x7E, 0x7B, 0x52, 0x7D, 0x7B, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6E,
		0x7D, 0x20, 0x2D, 0x20, 0x50, 0x72, 0x69, 0x6E, 0x74, 0x20, 0x72, 0x65,
		0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x20, 0x63, 0x6F, 0x6E, 0x74, 0x65,
		0x6E, 0x74, 0x73, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20, 0x6D, 0x65, 0x6D,
		0x6F, 0x72, 0x79, 0x20, 0x6C, 0x6F, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E,
		0x73, 0x7E, 0x7B, 0x55, 0x7D, 0x7B, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6E,
		0x7D, 0x20, 0x2D, 0x20, 0x55, 0x70, 0x6C, 0x6F, 0x61, 0x64, 0x20, 0x46,
		0x69, 0x6C, 0x65, 0x20, 0x28, 0x58, 0x4D, 0x6F, 0x64, 0x65, 0x6D, 0x2F,
		0x43, 0x52, 0x43, 0x20, 0x6F, 0x72, 0x20, 0x49, 0x6E, 0x74, 0x65, 0x6C,
		0x20, 0x48, 0x65, 0x78, 0x29, 0x7E, 0x7B, 0x56, 0x7D, 0x7B, 0x52, 0x65,
		0x74, 0x75, 0x72, 0x6E, 0x7D, 0x20, 0x2D, 0x20, 0x4D, 0x6F, 0x6E, 0x69,
		0x74, 0x6F, 0x72, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x7E,
		0x7B, 0x48, 0x48, 0x48, 0x48, 0x2E, 0x48, 0x48, 0x48, 0x48, 0x3E, 0x48,
		0x48, 0x48, 0x48, 0x7B, 0x57, 0x7D, 0x7B, 0x52, 0x65, 0x74, 0x75, 0x72,
		0x6E, 0x7D, 0x20, 0x2D, 0x20, 0x57, 0x72, 0x69, 0x74, 0x65, 0x20, 0x64,
		0x61, 0x74, 0x61, 0x20, 0x69, 0x6E, 0x20, 0x52, 0x41, 0x4D, 0x20, 0x74,
		0x6F, 0x20, 0x45, 0x45, 0x50, 0x52, 0x4F, 0x4D, 0x7E, 0x7B, 0x21, 0x7D,
		0x7B, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x7D, 0x20, 0x2D, 0x20, 0x45,
		0x6E, 0x74, 0x65, 0x72, 0x20, 0x41, 0x73, 0x73, 0x65, 0x6D, 0x62, 0x6C,
		0x65, 0x72, 0x7E, 0x7B, 0x40, 0x7D, 0x7B, 0x52, 0x65, 0x74, 0x75, 0x72,
		0x6E, 0x7D, 0x20, 0x2D, 0x20, 0x43, 0x6F, 0x6C, 0x64, 0x2D, 0x53, 0x74,
		0x61, 0x72, 0x74, 0x20, 0x45, 0x6E, 0x68, 0x61, 0x6E, 0x63, 0x65, 0x64,
		0x20, 0x42, 0x61, 0x73, 0x69, 0x63, 0x7E, 0x7B, 0x23, 0x7D, 0x7B, 0x52,
		0x65, 0x74, 0x75, 0x72, 0x6E, 0x7D, 0x20, 0x2D, 0x20, 0x57, 0x61, 0x72,
		0x6D, 0x5F, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x45, 0x6E, 0x68, 0x61,
		0x6E, 0x63, 0x65, 0x64, 0x20, 0x42, 0x61, 0x73, 0x69, 0x63, 0x7E, 0x7B,
		0x3F, 0x7D, 0x7B, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x7D, 0x20, 0x2D,
		0x20, 0x50, 0x72, 0x69, 0x6E, 0x74, 0x20, 0x6D, 0x65, 0x6E, 0x75, 0x20,
		0x6F, 0x66, 0x20, 0x63, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 0x73, 0x7E,
		0x7E, 0x00, 0x7E, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x63,
		0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20,
		0x3A, 0x7E, 0x53, 0x79, 0x6E, 0x74, 0x61, 0x78, 0x20, 0x3D, 0x20, 0x7B,
		0x7D, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2C, 0x20,
		0x5B, 0x5D, 0x20, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C, 0x7E,
		0x48, 0x48, 0x48, 0x48, 0x3D, 0x68, 0x65, 0x78, 0x20, 0x61, 0x64, 0x64,
		0x72, 0x65, 0x73, 0x73, 0x2C, 0x20, 0x4F, 0x50, 0x43, 0x3D, 0x4F, 0x70,
		0x63, 0x6F, 0x64, 0x65, 0x2C, 0x20, 0x44, 0x44, 0x3D, 0x68, 0x65, 0x78,
		0x20, 0x64, 0x61, 0x74, 0x61, 0x2C, 0x20, 0x27, 0x5F, 0x27, 0x3D, 0x53,
		0x70, 0x61, 0x63, 0x65, 0x20, 0x42, 0x61, 0x72, 0x20, 0x6F, 0x72, 0x20,
		0x54, 0x61, 0x62, 0x7E, 0x27, 0x24, 0x27, 0x20, 0x53, 0x79, 0x6D, 0x62,
		0x6F, 0x6C, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6F, 0x70, 0x74, 0x69,
		0x6F, 0x6E, 0x61, 0x6C, 0x2C, 0x20, 0x61, 0x6C, 0x6C, 0x20, 0x76, 0x61,
		0x6C, 0x75, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x48, 0x45, 0x58,
		0x2E, 0x7E, 0x41, 0x6E, 0x79, 0x20, 0x69, 0x6E, 0x70, 0x75, 0x74, 0x20,
		0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x61, 0x20, 0x27, 0x73, 0x65, 0x6D,
		0x69, 0x2D, 0x63, 0x6F, 0x6C, 0x6F, 0x6E, 0x27, 0x20, 0x69, 0x73, 0x20,
		0x69, 0x67, 0x6E, 0x6F, 0x72, 0x65, 0x64, 0x2E, 0x7E, 0x7E, 0x7B, 0x48,
		0x48, 0x48, 0x48, 0x7D, 0x7B, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x7D,
		0x20, 0x2D, 0x20, 0x53, 0x65, 0x74, 0x20, 0x69, 0x6E, 0x70, 0x75, 0x74,
		0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7E, 0x5B, 0x48, 0x48,
		0x48, 0x48, 0x5D, 0x5B, 0x5F, 0x5D, 0x7B, 0x4F, 0x50, 0x43, 0x7D, 0x5B,
		0x5F, 0x5D, 0x5B, 0x23, 0x28, 0x24, 0x44, 0x44, 0x5F, 0x48, 0x48, 0x48,
		0x48, 0x2C, 0x58, 0x29, 0x2C, 0x59, 0x5D, 0x7B, 0x52, 0x65, 0x74, 0x75,
		0x72, 0x6E, 0x7D, 0x20, 0x2D, 0x20, 0x41, 0x73, 0x73, 0x65, 0x6D, 0x62,
		0x6C, 0x65, 0x20, 0x6C, 0x69, 0x6E, 0x65, 0x7E, 0x5B, 0x48, 0x48, 0x48,
		0x48, 0x5D, 0x7B, 0x4C, 0x7D, 0x7B, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6E,
		0x7D, 0x20, 0x2D, 0x20, 0x4C, 0x69, 0x73, 0x74, 0x20, 0x28, 0x64, 0x69,
		0x73, 0x61, 0x73, 0x73, 0x65, 0x6D, 0x62, 0x6C, 0x65, 0x29, 0x20, 0x32,
		0x30, 0x20, 0x6C, 0x69, 0x6E, 0x65, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x70,
		0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x7E, 0x7B, 0x52, 0x65, 0x74, 0x75,
		0x72, 0x6E, 0x7D, 0x20, 0x2D, 0x20, 0x45, 0x78, 0x69, 0x74, 0x20, 0x41,
		0x73, 0x73, 0x65, 0x6D, 0x62, 0x6C, 0x65, 0x72, 0x20, 0x62, 0x61, 0x63,
		0x6B, 0x20, 0x74, 0x6F, 0x20, 0x4D, 0x6F, 0x6E, 0x69, 0x74, 0x6F, 0x72,
		0x7E, 0x7B, 0x3F, 0x7D, 0x7B, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x7D,
		0x20, 0x2D, 0x20, 0x50, 0x72, 0x69, 0x6E, 0x74, 0x20, 0x6D, 0x65, 0x6E,
		0x75, 0x20, 0x6F, 0x66, 0x20, 0x63, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64,
		0x73, 0x7E, 0x7E, 0x00, 0x36, 0x35, 0x43, 0x30, 0x32, 0x20, 0x4D, 0x6F,
		0x6E, 0x69, 0x74, 0x6F, 0x72, 0x20, 0x76, 0x35, 0x2E, 0x31, 0x2E, 0x31,
		0x20, 0x28, 0x31, 0x32, 0x2D, 0x30, 0x32, 0x2D, 0x31, 0x32, 0x29, 0x20,
		0x52, 0x65, 0x61, 0x64, 0x79, 0x0D, 0x0A, 0x42, 0x79, 0x20, 0x4C, 0x65,
		0x65, 0x20, 0x44, 0x61, 0x76, 0x69, 0x73, 0x6F, 0x6E, 0x20, 0x61, 0x6E,
		0x64, 0x20, 0x4A, 0x6F, 0x73, 0x68, 0x75, 0x61, 0x20, 0x57, 0x61, 0x6C,
		0x6B, 0x65, 0x72, 0x0D, 0x0A, 0x28, 0x50, 0x72, 0x65, 0x73, 0x73, 0x20,
		0x3F, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x68, 0x65, 0x6C, 0x70, 0x29, 0x00
	};



	for (i = 0; i< 4560;i++)
	{
		pMemory[0xE800+i] = rawData [i];
	}
}

void load_brk( uint8_t *pMemory ) //This is the brk vector code. Prints "BRK Error"
{
	int i;
	static unsigned char brkcode[26] = {
		0xA2, 0x00, 0xBD, 0x10, 0x10, 0xF0, 0x06, 0x8D, 0x00, 0x03, 0xE8, 0xD0,
		0xF5, 0x4C, 0x0D, 0x10, 0x42, 0x52, 0x4B, 0x20, 0x45, 0x72, 0x72, 0x6F,
		0x72, 0x00
	};
	for (i = 0; i< 26;i++)
	{
		pMemory[0x1000+i] = brkcode [i];
	}
}


bool debugMode( tMCUState& mcu )
{
    std::cout << std::endl;

    // Dump the current state
    printState( mcu );

    while( true )
    {
        std::cout << std::endl << " - ";

        std::string inputLine;
        std::getline( std::cin, inputLine );

        std::istringstream parseLine( inputLine );

        // Find the first non-whitespace character as the command
        char debugCommand = 't'; // Blank lines are treated as traces

        parseLine >> debugCommand;

        switch( debugCommand )
        {
        case 'h': // Help (fall through)
        case '?': // Help
            std::cout
                << " ? - Help\n"
                << " q - Quit\n"
                << " g - Go - exit debugger\n"
                << " t - Trace - one instruction at a time\n"
                << " u [n] - Disassemble 'n' instructions from current PC\n";
            break;
        case 'q': // 'Quit'
            return false;
        case 'g': // 'Go'
            return true;
        case 't': // 'Trace' (execute one instruction)
            mcu.pcExecute();
            printState( mcu );
            break;
        case 'u': // Disassemble
            {
                unsigned instructions = 1;
                parseLine >> instructions;
                printDisassembly( mcu, mcu.regPC, instructions );
            }
            break;
        }
    }

    return false;
}
